{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","to","module","exports","ProfileStatus","useState","status","setStatus","editMode","setEditMode","useEffect","onDoubleClick","onBlur","updateStatus","value","autoFocus","onChange","event","target","maxLength15","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","error","className","styles","formSummaryError","createField","required","Input","undefined","type","Textarea","Object","keys","profile","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","Preloader","descriptionBlock","userAvatar","src","photos","large","userPhoto","files","length","savePhoto","initialValues","profileData","saveProfile","then","Post","text","likesCount","item","maxLength100","posts","profilePage","addPost","actions","postsBlock","p","id","values","newPost","newPostBody","compose","authorizedUserId","getProfile","getStatus","withRouter","userId","match","params","history","push","console"],"mappings":"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","file":"static/js/3.d6612470.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\";\nimport React from 'react'\nimport {connect} from \"react-redux\";\n\nconst mapStateToPropsForRedirect = state => ({\n    isAuth: state.auth.isAuth\n})\n\nexport const withAuthRedirect = (Component) => {\n\n    function RedirectComponent(props) {\n        if (!props.isAuth) {\n            return <Redirect to={'/login'}/>\n        }\n        return <Component {...props}/>\n    }\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"userAvatar\":\"ProfileInfo_userAvatar__qlIFO\",\"contact\":\"ProfileInfo_contact__1N3gp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype PropsType = {\n    status: string\n    updateStatus:(status: string) => void\n}\n\nconst ProfileStatus: React.FC<PropsType> = (props) => {\n\n    const [status, setStatus] = useState(props.status)\n    const [editMode, setEditMode] = useState(false)\n\n    useEffect( () => {\n        setStatus(props.status)\n    } , [props.status])\n\n    const activateMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setStatus(event.target.value)\n    }\n\n    return (\n        <div>\n            {!editMode && <div>\n                <b>Status: </b>  <span onDoubleClick={activateMode}>{props.status || '––––––'}</span>\n            </div>\n            }\n            {editMode && <div>\n                <b>Status: </b> <input onBlur={deactivateMode} value={status} autoFocus={true} onChange={onStatusChange}/>\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatus;","import React, {FC} from \"react\";\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport s from \"../ProfileInfo.module.css\";\nimport styles from \"../../../common/FormsControls/FormsControls.module.css\";\nimport {createField, GetStringKeys, Input, Textarea} from \"../../../common/FormsControls/FormsControls\";\nimport {ProfileType} from \"../../../../Types/Types\";\nimport {LoginFormValuesType} from \"../../../Login/Login\";\n\nconst maxLength15 = maxLengthCreator(15)\n\ntype PropsType = { profile: ProfileType }\ntype ProfileDataKeysType = GetStringKeys<ProfileType>\n\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = (props) => {\n    return <form onSubmit={props.handleSubmit}>\n        {<button>Save</button>}\n        {props.error && <div className={styles.formSummaryError}> {props.error} </div>}\n        {createField<ProfileDataKeysType>('Name', 'fullName', [required, maxLength15], Input)}\n        {createField<ProfileDataKeysType>(undefined, 'lookingForAJob', [], Input, {type: 'checkbox'}, 'Looking for a job')}\n        {createField<ProfileDataKeysType>('Enter your professional skills', 'lookingForAJobDescription', [], Textarea, {}, 'Professional skills')}\n        {createField<ProfileDataKeysType>('Tell us about you', 'aboutMe', [], Textarea, {}, 'About me')}\n        <div>\n            <b>Contacts</b>: {Object.keys(props.profile.contacts).map(key => {\n            return <div className={s.contact}> <b>{key}</b>\n                {/*TODO: create solution for embedded objects*/}\n                {createField(`Enter ${key}`, `contacts.${key}`, [], Input)}\n            </div>})}\n        </div>\n    </form>\n}\n\nexport default reduxForm<ProfileType, PropsType>({form: 'profileDataForm'})(ProfileDataForm)","import React, {FC, MouseEventHandler} from \"react\";\nimport s from \"../ProfileInfo.module.css\";\nimport {ProfileType} from \"../../../../Types/Types\";\n\ntype ProfileDataType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n    // goToEditMode: MouseEventHandler<HTMLButtonElement>\n}\n\nexport const ProfileData: FC<ProfileDataType> = ({profile, isOwner, goToEditMode}) => {\n    return (<div>\n            {isOwner && <button onClick={goToEditMode}>Edit</button>}\n            <div>\n                <b> Name </b>: {profile.fullName}\n            </div>\n            <div>\n                <b> Looking for a job</b>: {profile.lookingForAJob ? \"Yes\" : 'No'}\n            </div>\n            <div>\n                <b>Professional skills</b>: {profile.lookingForAJobDescription}\n            </div>\n            <div>\n                <b>About me</b>: {profile.aboutMe}\n            </div>\n            <div>\n                <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\n                if (profile.contacts[key]) {\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n                }\n            })}\n            </div>\n        </div>\n    )\n}\n\ntype ContactPropsType = {\n    contactTitle: string\n    contactValue: string\n}\n\nconst Contact: FC<ContactPropsType> = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}>\n        <b> {contactTitle}: </b> {contactValue}\n    </div>\n}","import React, {ChangeEvent, ChangeEventHandler, FC, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from '../../../assets/images/user.png'\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileDataForm from \"./ProfileData/ProfileDataForm\";\r\nimport {ProfileData} from \"./ProfileData/ProfileData\";\r\nimport {ProfileType} from \"../../../Types/Types\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profileData: ProfileType) => Promise<any>\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo:FC<PropsType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (event: ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files?.length) {\r\n            props.savePhoto(event.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (profileData: ProfileType) => {\r\n        //TODO: remove then\r\n        props.saveProfile(profileData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            })\r\n    }\r\n\r\n    return <div className={s.descriptionBlock}>\r\n\r\n        <div>\r\n            <img className={s.userAvatar}\r\n                 src={props.profile.photos.large || userPhoto}/>\r\n\r\n            {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n        </div>\r\n\r\n        {editMode\r\n            ? <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>\r\n            : <ProfileData profile={props.profile}\r\n                           isOwner={props.isOwner}\r\n                           goToEditMode={() => setEditMode(true)}/>}\r\n        <div>\r\n            <ProfileStatus status={props.status}\r\n                                    updateStatus={props.updateStatus}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","import React, {FC} from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    text: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: FC<PropsType> = ({text, likesCount}) => {\r\n    return (\r\n        <div className={s.item}>\r\n\r\n            <img src='https://w7.pngwing.com/pngs/39/283/png-transparent-user-user-people-linear-icon-user-infographic-people-monochrome-thumbnail.png'/>\r\n            { text }\r\n\r\n            <div>\r\n                <span>like</span> {likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {FC} from \"react\";\nimport {createField, GetStringKeys, Textarea} from \"../../../common/FormsControls/FormsControls\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\nimport {AddNewPostFormValuesType} from \"../MyPosts\";\n\nconst maxLength100 = maxLengthCreator(100)\n\ntype AddNewPostFormValuesKeysType = GetStringKeys<AddNewPostFormValuesType>\n\ntype OwnPropsType = {}\n\nconst AddNewPostForm: FC<InjectedFormProps<AddNewPostFormValuesType, OwnPropsType> & OwnPropsType> = ({ handleSubmit }) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField<AddNewPostFormValuesKeysType>('Enter your post', 'newPostBody', [required, maxLength100], Textarea)}\n            <button>Add post</button>\n        </form>\n    )\n}\n\nexport default reduxForm<AddNewPostFormValuesType, OwnPropsType>({form: 'profileAddNewPostForm'})(AddNewPostForm)\n","import React, {FC} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport AddNewPostForm from \"./AddNewPostForm/AddNewPostForm\";\r\nimport {PostType} from \"../../../Types/Types\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\nimport {actions} from \"../../../redux/profileReducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostBody: string) => void\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nexport type AddNewPostFormValuesType = {\r\n    newPostBody: string\r\n}\r\nconst MyPosts: FC<PropsType> = ({ posts, addPost}) => {\r\n\r\n    const onAddPost = (values: AddNewPostFormValuesType) => {\r\n        const newPost = values.newPostBody\r\n        addPost(newPost)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h2>My posts</h2>\r\n\r\n            <div className={s.posts}>\r\n                {posts.map(p => <Post text={p.text} key={p.id} likesCount={p.likesCount}/>)}\r\n            </div>\r\n\r\n            <AddNewPostForm onSubmit={onAddPost}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    posts: state.profilePage.posts\r\n})\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps,\r\n    {addPost: actions.addPost})(MyPosts);","import React, {ComponentType, FC, useEffect} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {getProfile, getStatus, savePhoto, saveProfile, updateStatus} from \"../../redux/profileReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {ProfileType} from \"../../Types/Types\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profileData: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nconst Profile: FC<PropsType> = (props) => {\r\n    let userId: number | null = +props.match.params.userId\r\n    useEffect(() => {\r\n        if (!userId) {\r\n            userId = props.authorizedUserId;\r\n            if (!userId) {\r\n                //todo: replace push with redirect\r\n                props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error('ID should exists in URI params or in state \"authorizedUserId\"')\r\n        } else {\r\n            props.getProfile(userId)\r\n            props.getStatus(userId)\r\n        }\r\n\r\n    }, [userId])\r\n\r\n    return <div>\r\n        <ProfileInfo profile={props.profile as ProfileType}\r\n                     status={props.status}\r\n                     updateStatus={props.updateStatus}\r\n                     isOwner={!props.match.params.userId}\r\n                     savePhoto={props.savePhoto}\r\n                     saveProfile={props.saveProfile}/>\r\n        <MyPosts/>\r\n    </div>\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n    })\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps,\r\n        {\r\n            getProfile,\r\n            getStatus,\r\n            updateStatus,\r\n            savePhoto,\r\n            saveProfile\r\n        }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(Profile)\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}