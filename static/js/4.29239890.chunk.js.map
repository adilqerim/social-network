{"version":3,"sources":["hoc/withAuthRedirect.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","to","module","exports","DialogItem","id","name","path","className","s","dialogItem","src","activeClassName","activeLink","Message","message","reduxForm","form","handleSubmit","onSubmit","createField","required","Textarea","compose","dialogsPage","sendMessage","actions","dialogs","dialogItems","map","d","messages","m","values","newMessageBody"],"mappings":"+MAIMA,EAA6B,SAAAC,GAAK,MAAK,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAS7B,OAAOC,YAAQN,EAARM,EAPP,SAA2BC,GACvB,OAAKA,EAAML,OAGJ,cAACG,EAAD,eAAeE,IAFX,cAAC,IAAD,CAAUC,GAAI,gB,oBCXjCC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,WAAa,4BAA4B,SAAW,0BAA0B,WAAa,8B,kFCqB5KC,EAbmB,SAAC,GAAmB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KAElCC,EAAO,YAAcF,EAEzB,OACI,sBAAKG,UAAWC,IAAEC,WAAlB,UACI,qBAAKC,IAAI,kKACT,eAAC,IAAD,CAASV,GAAKM,EAAOK,gBAAiBH,IAAEI,WAAxC,cAAsDP,EAAtD,WCFGQ,EAPsB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpC,OACI,qBAAKP,UAAWC,IAAEM,QAAlB,SAA6BA,K,2DCStBC,cAAoC,CAACC,KAAM,wBAA3CD,EATgF,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aAC9F,OACI,uBAAMC,SAAUD,EAAhB,UACKE,YAAuC,qBAAsB,iBAAkB,CAACC,KAAWC,KAC5F,wDCmCGC,sBACXxB,aAPoB,SAACL,GACrB,MAAO,CACH8B,YAAa9B,EAAM8B,eAMnB,CACIC,YAAaC,IAAQD,cAE7B5B,IALW0B,EA5BsB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YAOjD,OACI,sBAAKjB,UAAWC,IAAEkB,QAAlB,UACI,qBAAKnB,UAAWC,IAAEmB,YAAlB,SACKJ,EAAYG,QAAQE,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYzB,GAAIyB,EAAEzB,GAAeC,KAAMwB,EAAExB,MAAdwB,EAAEzB,SAG/D,sBAAKG,UAAWC,IAAEsB,SAAlB,UACKP,EAAYO,SAASF,KAAI,SAAAG,GAAC,OAAI,cAAC,EAAD,CAAoBjB,QAASiB,EAAEjB,SAAjBiB,EAAE3B,OAE/C,cAAC,EAAD,CAAgBc,SAbN,SAACc,GACnBR,EAAYQ,EAAOC","file":"static/js/4.29239890.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\";\nimport React from 'react'\nimport {connect} from \"react-redux\";\n\nconst mapStateToPropsForRedirect = state => ({\n    isAuth: state.auth.isAuth\n})\n\nexport const withAuthRedirect = (Component) => {\n\n    function RedirectComponent(props) {\n        if (!props.isAuth) {\n            return <Redirect to={'/login'}/>\n        }\n        return <Component {...props}/>\n    }\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogItems\":\"Dialogs_dialogItems__3flRc\",\"activeLink\":\"Dialogs_activeLink__34w6e\",\"messages\":\"Dialogs_messages__1w_Up\",\"dialogItem\":\"Dialogs_dialogItem__1AD6j\"};","import React, {FC} from 'react'\nimport { NavLink } from 'react-router-dom'\nimport s from '../Dialogs.module.css';\n\ntype PropsType = {\n    id: number\n    name: string\n}\n\nconst DialogItem: FC<PropsType> = ( { id, name }) => {\n\n    let path = '/dialogs/' + id\n\n    return (\n        <div className={s.dialogItem}>\n            <img src='https://images.unsplash.com/photo-1562860149-691401a306f8?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=2468&q=80'/>\n            <NavLink to={ path } activeClassName={s.activeLink}> {name} </NavLink>\n        </div>\n    )\n}\n\n\nexport default DialogItem;","import React from 'react'\nimport s from '../Dialogs.module.css'\n\ntype PropsType = {\n    message: string\n}\n\nconst Message: React.FC<PropsType> = ({ message }) => {\n    return (\n        <div className={s.message}>{ message }</div>\n    )\n}\n\n\nexport default Message;","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport React, {FC} from \"react\";\nimport {createField, Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {NewMessageFormValuesType} from \"../Dialogs\";\n\ntype MessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\ntype PropsType = {}\n\nconst AddMessageForm: FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = ({ handleSubmit }) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField<MessageFormValuesKeysType>('Enter your message', 'newMessageBody', [required], Textarea)}\n            <button>Send message</button>\n        </form>\n    )\n}\n\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialogAddMessageForm'})(AddMessageForm)\n","import React, {ComponentType} from 'react'\nimport s from './Dialogs.module.css'\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {actions, InitialStateType} from \"../../redux/dialogsReducer\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\nimport {AppStateType} from \"../../redux/reduxStore\";\n\ntype PropsType = {\n    dialogsPage: InitialStateType\n    sendMessage: (message: string) => void\n}\n\nexport type NewMessageFormValuesType = {\n    newMessageBody: string\n}\n\nconst Dialogs: React.FC<PropsType> = ({ dialogsPage, sendMessage}) => {\n\n\n    const addNewMessage = (values: NewMessageFormValuesType ) => {\n        sendMessage(values.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogItems}>\n                {dialogsPage.dialogs.map(d => <DialogItem id={d.id} key={d.id} name={d.name}/>)}\n            </div>\n\n            <div className={s.messages}>\n                {dialogsPage.messages.map(m => <Message key={m.id} message={m.message}/>)}\n\n                <AddMessageForm onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\n\nexport default compose<ComponentType>(\n    connect(mapStateToProps,\n        {\n            sendMessage: actions.sendMessage\n        }),\n    withAuthRedirect\n)(Dialogs)\n"],"sourceRoot":""}