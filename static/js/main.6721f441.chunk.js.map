{"version":3,"sources":["components/common/Paginator/Paginator.module.css","components/Header/Header.module.css","api/profile-api.ts","redux/profileReducer.ts","redux/dialogsReducer.ts","assets/images/user.png","api/api.ts","components/common/Preloader/Preloader.module.css","components/Users/Users.module.css","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","api/auth-api.ts","api/security-api.ts","redux/authReducer.ts","components/Header/Header.tsx","redux/appReducer.ts","redux/sidebarReducer.ts","api/users-api.ts","utils/object-helpers.ts","redux/usersReducer.ts","redux/reduxStore.ts","redux/usersSelectors.ts","components/Users/User/User.tsx","components/common/Paginator/Paginator.tsx","components/Users/User/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersPage.tsx","components/Login/LoginForm.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/common/Preloader/Preloader.tsx"],"names":["module","exports","profileAPI","userId","axiosInstance","get","then","response","data","status","put","file","formData","FormData","append","headers","profile","initialState","posts","id","text","likesCount","actions","addPost","newPostBody","type","setUserProfile","setStatus","savePhotoSuccess","photos","getProfile","dispatch","a","getStatus","updateStatus","resultCode","ResultCodesEnum","Success","console","log","savePhoto","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","dialogs","name","message","sendMessage","newMessageBody","dialogsReducer","ResultCodeForCaptcha","axios","create","baseURL","withCredentials","News","Music","Settings","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","payload","getAuthUserData","meData","getCaptchaUrl","url","authReducer","compose","connect","userName","logout","location","useLocation","className","s","header","loginBlock","shape","onClick","pathname","to","initialized","appReducer","sidebarReducer","usersAPI","currentPage","pageSize","term","friend","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUsersCount","isFetching","followingInProgress","filter","totalCount","getUsers","usersReducer","followed","rootReducer","combineReducers","profilePage","dialogsPage","usersPage","sidebar","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","getUsersReselector","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","User","user","useSelector","useDispatch","followUser","follow","unfollowUser","unfollow","src","small","userPhoto","styles","userAvatar","disabled","some","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","p","cn","selectedPage","pageNumber","UsersSearchForm","onFilterChanged","initialValues","onSubmit","values","setSubmitting","isSubmitting","as","value","Users","useEffect","UsersPage","props","pageTitle","Preloader","reduxForm","handleSubmit","createField","required","Input","undefined","error","formSummaryError","Login","loginData","CaptchaIsRequired","length","Content","Layout","Sider","Profile","React","lazy","Dialogs","App","this","initializeApp","width","mode","style","height","borderRight","Item","icon","TeamOutlined","UserOutlined","SendOutlined","padding","margin","minHeight","fallback","exact","from","path","render","component","textAlign","Component","AppContainer","promise","all","withRouter","SocialNetworkApp","ReactDOM","document","getElementById","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","validate","maxLengthCreator","maxLength","loader"],"mappings":"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","file":"static/js/main.6721f441.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__3SIki\",\"paginator\":\"Paginator_paginator__18P4_\",\"pageNumber\":\"Paginator_pageNumber__xOsKi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"loginBlock\":\"Header_loginBlock__6mma5\"};","import {PhotosType, ProfileType} from \"../Types/Types\";\nimport {axiosInstance, APIResponseType} from \"./api\";\n\n\ntype SavePhotoDataType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile: (userId: number) => {\n        return axiosInstance.get<ProfileType>(`profile/${userId}`)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    getStatus: (userId: number) => {\n        return axiosInstance.get<string>(`profile/status/${userId}`)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    updateStatus: (status: string) => {\n        return axiosInstance.put<APIResponseType>(`profile/status`, {\n            status: status\n        }).then(response => {\n                return response.data\n            })\n    },\n\n    savePhoto: (file: File) => {\n        const formData = new FormData();\n        formData.append('image', file)\n        return axiosInstance.put<APIResponseType<SavePhotoDataType>>(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(response => {\n                return response.data\n            })\n    },\n\n    saveProfile: (profile: ProfileType) => {\n\n        return axiosInstance.put<APIResponseType>(`profile`, profile)\n            .then(response => {\n                return response.data\n            })\n    },\n}","import {ResultCodesEnum} from \"../api/api\";\nimport {FormAction, stopSubmit} from \"redux-form\";\nimport {PhotosType, PostType, ProfileType} from \"../Types/Types\";\nimport {BaseThunkType, InferActionsTypes} from \"./reduxStore\";\nimport {profileAPI} from \"../api/profile-api\";\n\nconst initialState = {\n    posts: [\n        {id: 1, text: 'HEY)', likesCount: 5},\n        {id: 2, text: 'WHAT TIME IS IT?', likesCount: 6}\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: ''\n}\n\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n    switch (action.type) {\n        case \"SN/PROFILE/ADD_POST\":\n            const newPost = {id: 5, text: action.newPostBody, likesCount: 0}\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            }\n        case \"SN/PROFILE/SET_USER_PROFILE\":\n            return {\n                ...state,\n                profile: action.profile\n            }\n        case \"SN/PROFILE/SET_STATUS\":\n            return {\n                ...state,\n                status: action.status\n            }\n        case \"SN/PROFILE/SAVE_PHOTO_SUCCESS\":\n            return {\n                ...state,\n                profile: {...state.profile, photos: action.photos} as ProfileType\n            }\n        default:\n            return state\n    }\n\n}\n\nexport const actions = {\n    addPost: (newPostBody: string) => ({type: 'SN/PROFILE/ADD_POST', newPostBody} as const),\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\n}\n\nexport const getProfile = (userId: number): ThunkType =>\n    async (dispatch) => {\n    const data = await profileAPI.getProfile(userId)\n    dispatch(actions.setUserProfile(data))\n}\n\nexport const getStatus = (userId: number): ThunkType =>\n    async (dispatch) => {\n    const data = await profileAPI.getStatus(userId)\n    dispatch(actions.setStatus(data))\n}\n\nexport const updateStatus = (status: string): ThunkType =>\n    async (dispatch) => {\n    try {\n        const data = await profileAPI.updateStatus(status)\n        if (data.resultCode === ResultCodesEnum.Success) {\n            dispatch(actions.setStatus(status))\n        }\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const savePhoto = (file: File): ThunkType =>\n    async (dispatch) => {\n    const data = await profileAPI.savePhoto(file)\n    if (data.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.savePhotoSuccess(data.data.photos))\n    }\n}\n\nexport const saveProfile = (profile: ProfileType): ThunkType =>\n    async (dispatch, getState) => {\n        const userId = getState().auth.id\n\n        let data = await profileAPI.saveProfile(profile)\n\n        if (data.resultCode === ResultCodesEnum.Success) {\n            if (userId != null) {\n                await dispatch(getProfile(userId))\n            } else {\n                throw new Error('userId can\\'t be null' )\n            }\n        } else {\n            dispatch(stopSubmit('profileDataForm', {_error: data.messages[0]}))\n            return Promise.reject(data.messages[0])\n        }\n}\n\nexport default profileReducer;\n\ntype InitialStateType = typeof initialState\n\ntype ActionsType = InferActionsTypes<typeof actions>\n\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","import {DialogType, MessageType} from \"../Types/Types\";\nimport {InferActionsTypes} from \"./reduxStore\";\n\nconst initialState = {\n    dialogs: [\n        {id: 1, name: 'Mops'},\n        {id: 2, name: 'Sveta'},\n        {id: 3, name: 'Valya'},\n        {id: 4, name: 'Alla'},\n        {id: 5, name: 'Dima'}\n    ] as Array<DialogType>,\n    messages: [\n        {id: 1, message: 'Hello)'},\n        {id: 2, message: 'Long to no see!'},\n        {id: 3, message: 'How you doing?'},\n        {id: 4, message: 'Hey, I am great'},\n        {id: 5, message: 'Thank you'}\n    ] as Array<MessageType>,\n}\n\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n    switch (action.type) {\n        case \"SN/DIALOGS/ADD_MESSAGE\": {\n            const message = { id: 6, message: action.newMessageBody }\n            return {\n                ...state,\n                messages: [...state.messages, message],\n            }\n        }\n        default:\n            return state\n    }\n\n}\n\nexport const actions = {\n    sendMessage: (newMessageBody: string) => ({\n        type: 'SN/DIALOGS/ADD_MESSAGE',\n        newMessageBody,\n    })\n}\n\nexport default dialogsReducer;\n\nexport type InitialStateType = typeof initialState\n\ntype ActionsType = InferActionsTypes<typeof actions>\n","export default __webpack_public_path__ + \"static/media/user.e5117e8e.png\";","import axios from \"axios\";\n\nexport const axiosInstance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'a0344536-ac2e-4063-b8a8-55235ad088cc' //test key\n        // 'API-KEY': '2a8d8ce3-a4a1-4df0-a097-633d8850e8c4' // my key\n    }\n\n})\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1,\n}\n\nexport enum ResultCodeForCaptcha {\n    CaptchaIsRequired = 10\n}\n\nexport type APIResponseType<D = any, RC = ResultCodesEnum> = {\n    resultCode: RC\n    messages: Array<string>\n    data: D\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__wv7rF\",\"load4\":\"Preloader_load4__2dqzB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userAvatar\":\"Users_userAvatar__1bfJN\",\"selectedPage\":\"Users_selectedPage__J63sh\"};","import React from 'react'\nimport s from './News.module.css'\n\nconst News = () => {\n    return (\n        <div>\n            News\n        </div>\n    )\n}\n\n\nexport default News;","import React from 'react'\nimport s from './Music.module.css'\n\nconst Music = () => {\n    return (\n        <div>\n            Music\n        </div>\n    )\n}\n\n\nexport default Music;","import React from 'react'\nimport s from './Settings.module.css'\n\nconst Settings = () => {\n    return (\n        <div>\n            Settings\n        </div>\n    )\n}\n\n\nexport default Settings;","import {axiosInstance, APIResponseType, ResultCodeForCaptcha, ResultCodesEnum} from \"./api\";\n\ntype AuthMeDataType = {\n    id: number,\n    email: string,\n    login: string\n}\ntype LoginDataType = {\n    userId: number\n}\n\nexport const authAPI = {\n    me: () => {\n        return axiosInstance.get<APIResponseType<AuthMeDataType>>('auth/me')\n            .then(response => {\n                return response.data\n            })\n    },\n\n    login: (email: string, password: string, rememberMe = false, captcha: null | string = null) => {\n        return axiosInstance.post<APIResponseType<LoginDataType, ResultCodesEnum | ResultCodeForCaptcha>>('auth/login', {\n            email, password, rememberMe, captcha\n        })\n            .then(response => {\n                return response.data\n            })\n    },\n\n    logout: () => {\n        return axiosInstance.delete<APIResponseType>('auth/login')\n            .then(response => {\n                return response.data\n            })\n    },\n}","import {axiosInstance} from \"./api\";\n\ntype CaptchaResponseType = {\n    url: string\n}\nexport const securityAPI = {\n    getCaptcha: () => {\n        return axiosInstance.get<CaptchaResponseType>('security/get-captcha-url')\n            .then(response => {\n                return response.data\n            })\n    },\n\n}","import {ResultCodeForCaptcha, ResultCodesEnum} from \"../api/api\";\nimport {FormAction, stopSubmit} from \"redux-form\";\nimport {BaseThunkType, InferActionsTypes} from \"./reduxStore\";\nimport {authAPI} from \"../api/auth-api\";\nimport {securityAPI} from \"../api/security-api\";\n\nconst initialState = {\n    id: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null // if null, then captcha is not required\n}\n\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n\n    switch (action.type) {\n        case 'SN/AUTH/SET_USER_DATA':\n        case 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload,\n            }\n        default:\n            return state\n    }\n}\n\nconst actions = {\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'SN/AUTH/SET_USER_DATA',\n        payload: {id, email, login, isAuth}\n    }),\n    getCaptchaUrlSuccess: (captchaUrl: string) => {\n        return {\n            type: 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\n        }\n    }\n}\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n\n    const meData = await authAPI.me()\n\n    if (meData.resultCode === ResultCodesEnum.Success) {\n        let {id, email, login} = meData.data\n        dispatch(actions.setAuthUserData(id, email, login, true))\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => {\n    return async (dispatch) => {\n        const loginData = await authAPI.login(email, password, rememberMe, captcha)\n\n        if (loginData.resultCode === ResultCodesEnum.Success) {\n            dispatch(getAuthUserData())\n        } else {\n            if (loginData.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\n                dispatch(getCaptchaUrl())\n            }\n            let message = loginData.messages.length > 0 ? loginData.messages[0] : 'Some error'\n            dispatch(stopSubmit('login', {_error: message}))\n        }\n    }\n}\n\nexport const logout = (): ThunkType => async (dispatch) => {\n    const data = await authAPI.logout()\n    if (data.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setAuthUserData(null, null, null, false))\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => {\n    return async (dispatch) => {\n        const data = await securityAPI.getCaptcha()\n        dispatch(actions.getCaptchaUrlSuccess(data.url))\n    }\n}\n\nexport default authReducer\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\n\n","import React, {FC} from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink, useLocation} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {compose} from \"redux\";\r\nimport {Button} from \"antd\";\r\n\r\ntype MapStatePropsType = {\r\n    userName: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst Header: FC<PropsType> = ({ userName,  isAuth, logout}) => {\r\n\r\n    const location = useLocation()\r\n\r\n    return <header className={s.header}>\r\n        {/*<img src='https://i.pinimg.com/originals/20/60/2d/20602d43cc993811e5a6bd1886af4f33.png' />*/}\r\n        <div className={s.loginBlock}>\r\n            {isAuth\r\n                //Имя пользователя и кнопка выхода\r\n                ? <div>{userName} <Button type=\"primary\" shape=\"round\" onClick={logout}>LOG OUT</Button></div>\r\n                : location.pathname !== '/login' && <NavLink to={'/login'}><Button type=\"primary\" shape=\"round\">LOGIN</Button></NavLink>}\r\n        </div>\r\n    </header>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    userName: state.auth.login,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(connect(mapStateToProps,\r\n    { logout }),\r\n    )(Header);\r\n","import {getAuthUserData} from \"./authReducer\";\nimport {BaseThunkType, InferActionsTypes} from \"./reduxStore\";\n\nconst initialState = {\n    initialized: false\n}\n\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n\n    switch(action.type) {\n        case \"SN/APP/INITIALIZED_SUCCESS\":\n                return {\n                ...state,\n                initialized: true,\n            }\n\n        default:\n            return state;\n    }\n}\n\nconst actions = {\n    initializedSuccess: () => ({\n        type: 'SN/APP/INITIALIZED_SUCCESS',\n    })\n}\n\nexport const initializeApp = (): ThunkType => (dispatch) => {\n    let promise = dispatch(getAuthUserData())\n\n    Promise.all([ promise ])\n        .then( () => {\n        dispatch(actions.initializedSuccess())\n    })\n}\n\nexport default appReducer\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes, void>\n","const initialState = {}\n\nexport type InitialStateType = typeof initialState\n\nconst sidebarReducer = (state = initialState, action: any): InitialStateType => {\n    return state;\n}\n\nexport default sidebarReducer;\n","import {GetUsersType} from \"../Types/Types\";\nimport {axiosInstance, APIResponseType} from \"./api\";\n\n\nexport const usersAPI = {\n    getUsers: (currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) => {\n        return axiosInstance.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\n            .then(response => {\n                return response.data\n            })\n    },\n\n    followUser: (userId: number) => {\n        return axiosInstance.post<APIResponseType>(`follow/${userId}`)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    unfollowUser: (userId: number) => {\n        return axiosInstance.delete<APIResponseType>(`follow/${userId}`)\n            .then(response => {\n                return response.data\n            })\n    }\n}","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\n    return items.map((u: any) => {\n        if (u[objPropName] === itemId) {\n            return {...u, ...newObjProps}\n        }\n        return u;\n    })\n}","import {ResultCodesEnum} from \"../api/api\";\nimport {UserType} from \"../Types/Types\";\nimport {AppStateType, InferActionsTypes} from \"./reduxStore\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {usersAPI} from \"../api/users-api\";\nimport {updateObjectInArray} from \"../utils/object-helpers\";\n\nconst initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: [] as Array<number>, // array of users ids\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n}\n\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case \"SN/USERS/FOLLOW\":\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\n            }\n        case \"SN/USERS/UNFOLLOW\":\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\n            }\n        case \"SN/USERS/SET_USERS\": {\n            return {...state, users: action.users}\n        }\n        case \"SN/USERS/SET_CURRENT_PAGE\":\n            return {...state, currentPage: action.currentPage}\n        case \"SN/USERS/SET_TOTAL_USERS_COUNT\":\n            return {...state, totalUsersCount: action.totalCount}\n        case \"SN/USERS/TOGGLE_IS_FETCHING\":\n            return {...state, isFetching: action.isFetching}\n        case \"SN/USERS/SET_FILTER\":\n            return {...state, filter: action.payload}\n        case \"SN/USERS/TOGGLE_FOLLOWING_PROGRESS\":\n            return {\n                ...state,\n                followingInProgress: action.followingInProgress\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\n    setTotalUsersCount: (totalCount: number) => ({type: 'SN/USERS/SET_TOTAL_USERS_COUNT', totalCount} as const),\n    toggleIsFetching: (isFetching: boolean) => ({type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching} as const),\n    toggleFollowingProgress: (followingInProgress: boolean, userId: number) => ({\n        type: 'SN/USERS/TOGGLE_FOLLOWING_PROGRESS', followingInProgress, userId\n    } as const)\n}\n\nexport const getUsers = (currentPage: number, pageSize: number, filter: FilterType): ThunkType =>\n    async (dispatch) => {\n        dispatch(actions.toggleIsFetching(true))\n        dispatch(actions.setCurrentPage(currentPage))\n        dispatch(actions.setFilter(filter))\n\n        const data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\n        dispatch(actions.toggleIsFetching(false))\n        dispatch(actions.setUsers(data.items))\n        dispatch(actions.setTotalUsersCount(data.totalCount))\n        // return data\n    }\n\nexport const follow = (userId: number): ThunkType =>\n    async (dispatch) => {\n        dispatch(actions.toggleFollowingProgress(true, userId))\n        const data = await usersAPI.followUser(userId)\n        if (data.resultCode === ResultCodesEnum.Success) {\n            dispatch(actions.followSuccess(userId))\n        }\n        dispatch(actions.toggleFollowingProgress(false, userId))\n    }\n\nexport const unfollow = (userId: number): ThunkType =>\n    async (dispatch) => {\n        dispatch(actions.toggleFollowingProgress(true, userId))\n        const data = await usersAPI.unfollowUser(userId)\n        if (data.resultCode === ResultCodesEnum.Success) {\n            dispatch(actions.unfollowSuccess(userId))\n        }\n        dispatch(actions.toggleFollowingProgress(false, userId))\n    }\n\nexport default usersReducer\n\ntype InitialStateType = typeof initialState\nexport type FilterType = typeof initialState.filter\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport profileReducer from \"./profileReducer\";\nimport dialogsReducer from \"./dialogsReducer\";\nimport sidebarReducer from \"./sidebarReducer\";\nimport usersReducer from \"./usersReducer\";\nimport authReducer from \"./authReducer\";\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\nimport { reducer as formReducer } from 'redux-form'\nimport appReducer from \"./appReducer\";\n\nconst rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    sidebar: sidebarReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n});\n\ntype RootReducerType = typeof rootReducer\nexport type AppStateType = ReturnType<RootReducerType> // (globalState: AppStateType)\n\n\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)\n));\n\n// let store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n// @ts-ignore\nwindow.store = store\n\nexport default store;","import {createSelector} from \"reselect\";\nimport {AppStateType} from \"./reduxStore\";\n\nexport const getUsersSelector = (state: AppStateType) => {\n    return state.usersPage.users\n}\n\nexport const getUsersReselector = createSelector(getUsersSelector, (users) => {\n    return users.filter(u => true)\n});\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress\n}\n\nexport const getUsersFilter = (state: AppStateType) => {\n    return state.usersPage.filter\n}\n\n\n\n","import {NavLink} from \"react-router-dom\";\nimport userPhoto from \"../../../assets/images/user.png\";\nimport styles from \"../Users.module.css\";\nimport React from \"react\";\nimport {UserType} from \"../../../Types/Types\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getFollowingInProgress} from \"../../../redux/usersSelectors\";\nimport {follow, unfollow} from \"../../../redux/usersReducer\";\n\ntype PropsType = {\n    user: UserType\n}\n\nconst User: React.FC<PropsType> = ({ user}) => {\n\n    const followingInProgress = useSelector(getFollowingInProgress)\n\n    const dispatch = useDispatch()\n\n    const followUser = (userId: number) => {\n        dispatch(follow(userId));\n    }\n    const unfollowUser = (userId: number) => {\n        dispatch(unfollow(userId))\n    }\n\n    return <div key={user.id}>\n                <span>\n                    <div>\n                        <NavLink to={'/profile/' + user.id}>\n                            <img src={user.photos.small != null ? user.photos.small : userPhoto}\n                                 className={styles.userAvatar}/>\n                        </NavLink>\n                    </div>\n                    <div>\n                        {user.followed\n                            ? <button disabled={followingInProgress.some(id => id === user.id)}\n                                      onClick={() => {\n                                          unfollowUser(user.id)\n                                      }}>Unfollow</button>\n\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\n                                      onClick={() => {\n                                          followUser(user.id)\n                                      }}>Follow</button>}\n\n                    </div>\n                </span>\n        <span>\n                    <span>\n                        <div>{user.name}</div>\n                        <div>{user.status}</div>\n                    </span>\n                    <span>\n                        <div>{'user.location.country'}</div>\n                        <div>{'user.location.city'}</div>\n                    </span>\n                </span>\n    </div>\n}\n\nexport default User","import React, {FC, useState} from 'react'\nimport styles from \"./Paginator.module.css\";\nimport cn from 'classnames'\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage: number\n    onPageChanged: (pageNumber: number) => void\n    portionSize?: number\n}\n\nconst Paginator: FC<PropsType> = ({ totalItemsCount, currentPage = 1, pageSize, onPageChanged, portionSize = 20 }) => {\n    const pagesCount = Math.ceil(totalItemsCount / pageSize)\n    const pages = []\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n\n    const portionCount = Math.ceil(pagesCount / portionSize)\n    let [portionNumber, setPortionNumber] = useState(1)\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\n    let rightPortionPageNumber = portionNumber * portionSize\n\n    return <div className={styles.paginator}>\n        { portionNumber > 1 &&\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\n        {pages\n            .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\n            .map(p => {\n                return <span className={cn ({\n                    [styles.selectedPage]: currentPage === p\n                }, styles.pageNumber)}\n                             onClick={() => {\n                                 onPageChanged(p)\n                             }}> {p} </span>\n            })}\n        { portionCount > portionNumber &&\n        <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\n    </div>\n}\n\nexport default Paginator","import {Field, Form, Formik} from \"formik\";\nimport React, {FC} from \"react\";\nimport {FilterType} from \"../../../redux/usersReducer\";\n\nconst searchUsersValidate = (values: any) => {\n    const errors = {};\n    return errors;\n}\n\ntype FormType = {\n    term: string\n    friend: 'true' | 'false' | 'null'\n\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\nexport const UsersSearchForm: FC<PropsType> = ({ onFilterChanged }) => {\n\n    const submit = (values: FormType, {setSubmitting}: {setSubmitting: (isSubmitting: boolean) => void}) => {\n\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\n        }\n\n        onFilterChanged(filter)\n        setSubmitting(false)\n    }\n\n    return (\n        <div>\n            <Formik\n                initialValues={{term: '', friend: 'null'}}\n                onSubmit={submit}>\n                {({isSubmitting}) => (\n                    <Form>\n                        <Field type=\"text\" name=\"term\"/>\n                        <Field name='friend' as='select'>\n                            <option value='null'>All</option>\n                            <option value='true'>Only Followed</option>\n                            <option value='false'>Only Unfollowed</option>\n                        </Field>\n                        <button type=\"submit\" disabled={isSubmitting}>\n                            Find\n                        </button>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    )\n}","import React, {useEffect} from 'react'\nimport User from \"./User/User\";\nimport Paginator from \"../common/Paginator/Paginator\";\nimport {UsersSearchForm} from \"./User/UsersSearchForm\";\nimport {FilterType, getUsers} from \"../../redux/usersReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    getCurrentPage,\n    getPageSize,\n    getTotalUsersCount,\n    getUsersFilter,\n    getUsersReselector\n} from \"../../redux/usersSelectors\";\n\nexport const Users: React.FC = () => {\n\n    const users = useSelector(getUsersReselector)\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const filter = useSelector(getUsersFilter)\n\n    const dispatch = useDispatch()\n\n    useEffect( () => {\n        dispatch(getUsers(currentPage, pageSize, filter))\n    }, [])\n\n    const onCurrentPageChanged = (pageNumber: number) => {\n        dispatch(getUsers(pageNumber, pageSize, filter))\n    }\n\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(getUsers(1, pageSize, filter))\n    }\n\n\n    return <div>\n\n        <Paginator totalItemsCount={totalUsersCount}\n                   pageSize={pageSize}\n                   currentPage={currentPage}\n                   onPageChanged={onCurrentPageChanged}/>\n\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\n\n        {users.map(user => {\n            return <User user={user}/>\n        })}\n    </div>\n}\n\n","import React from 'react'\nimport {useSelector} from \"react-redux\";\nimport {Users} from \"./Users\";\nimport Preloader from \"../common/Preloader/Preloader\";\nimport {getIsFetching,} from \"../../redux/usersSelectors\";\n\n\ntype UsersPagePropsType = {\n    pageTitle: string\n}\n\n    export const UsersPage: React.FC<UsersPagePropsType> = (props) => {\n\n    const isFetching = useSelector(getIsFetching)\n\n    return <>\n        <h2>{props.pageTitle}</h2>\n        {isFetching ? <Preloader/> : null}\n        <Users />\n    </>\n}\n","import React, {FC} from 'react'\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {login} from \"../../redux/authReducer\";\nimport {createField, GetStringKeys, Input} from \"../common/FormsControls/FormsControls\";\nimport {required} from \"../../utils/validators/validators\";\nimport styles from './../common/FormsControls/FormsControls.module.css'\nimport {LoginFormValuesType} from \"./Login\";\n\n\n\ntype LoginFormOwnPropsType = {\n    captchaUrl: string | null\n}\n\nexport type LoginFormValuesKeysType = GetStringKeys<LoginFormValuesType>\n\nconst LoginForm: FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnPropsType> & LoginFormOwnPropsType> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n\n            {createField<LoginFormValuesKeysType>('Enter login', 'email', [required], Input)}\n            {createField<LoginFormValuesKeysType>('Enter password', 'password', [required], Input, {type: 'password'})}\n            {createField<LoginFormValuesKeysType>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'Remember me')}\n\n            {props.captchaUrl && <img src={props.captchaUrl}/>}\n            {props.captchaUrl && createField<LoginFormValuesKeysType>(undefined, 'captcha', [required], Input)}\n            {props.error && <div className={styles.formSummaryError}>\n                {props.error}\n            </div>}\n            <button>Login</button>\n        </form>\n    )\n}\n\nexport default reduxForm<LoginFormValuesType, LoginFormOwnPropsType>({form: 'login'})(LoginForm)\n\n","import React from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {login} from \"../../redux/authReducer\";\nimport {Redirect, withRouter} from \"react-router-dom\";\nimport LoginForm from \"./LoginForm\";\nimport {AppStateType} from \"../../redux/reduxStore\";\n\n\nexport type LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\nexport const Login: React.FC = () => {\n\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n    const captchaUrl = useSelector( (state: AppStateType) => state.auth.captchaUrl)\n\n    const dispatch = useDispatch()\n\n    const onLogin = (formData: LoginFormValuesType) => {\n        let {email, password, rememberMe, captcha} = formData\n        dispatch(login(email, password, rememberMe, captcha))\n    }\n\n    if (isAuth) {\n        return <Redirect to={'/profile'} />\n    }\n\n    return <div>\n        <h1>Login</h1>\n        <LoginForm onSubmit={onLogin} captchaUrl={captchaUrl}/>\n    </div>\n}\n\n","import React, {FC, Suspense} from 'react';\nimport {BrowserRouter, HashRouter, Link, Redirect, Route, Switch, withRouter} from 'react-router-dom'\nimport './App.css';\nimport News from './components/News/News'\nimport Music from './components/Music/Music'\nimport Settings from './components/Settings/Settings'\nimport Header from \"./components/Header/Header\";\nimport {initializeApp} from \"./redux/appReducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport store, {AppStateType} from \"./redux/reduxStore\";\nimport {UsersPage} from \"./components/Users/UsersPage\";\nimport {Login} from \"./components/Login/Login\";\nimport 'antd/dist/antd.css';\nimport {Button, Layout, Menu} from \"antd\";\nimport {NotificationOutlined, SettingOutlined ,SendOutlined, UserOutlined, TeamOutlined} from '@ant-design/icons';\nimport {Footer} from \"antd/es/layout/layout\";\n\nconst {Content, Sider} = Layout;\n//LAZY LOADING\nconst Profile = React.lazy(() => import(\"./components/Profile/Profile\"));\nconst Dialogs = React.lazy(() => import('./components/Dialogs/Dialogs'));\n\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n\n            <Layout>\n                <Sider width={200} className=\"site-layout-background\">\n                    <Menu\n                        mode=\"inline\"\n                        style={{height: '100%', borderRight: 0}}\n                    >\n                        <Menu.Item key=\"3\" icon={<TeamOutlined />}><Link to=\"/users\">All Students</Link></Menu.Item>\n                        <Menu.Item key=\"1\" icon={<UserOutlined/>}><Link to=\"/profile\">My Profile</Link></Menu.Item>\n                        <Menu.Item key=\"2\" icon={<SendOutlined />}><Link to=\"/dialogs\">Messages</Link></Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout style={{padding: '0 24px 24px'}}>\n                    <Header />\n                    <Content\n                        className=\"site-layout-background\"\n                        style={{\n                            padding: 24,\n                            margin: 0,\n                            minHeight: 280,\n                        }}>\n                        <Suspense fallback={<div>Загрузка...</div>}>\n                            <Switch>\n                                <Redirect exact from=\"/\" to=\"/profile\"/>\n                                <Redirect exact from=\"/social-network\" to=\"/profile\"/>\n                                <Route path='/profile/:userId?' render={() => <Profile/>}/>\n                                <Route path='/dialogs' render={() => <Dialogs/>}/>\n                                <Route path='/users' render={() => <UsersPage pageTitle={'Samurai'}/>}/>\n                                <Route path='/news' component={News}/>\n                                <Route path='/music' component={Music}/>\n                                <Route path='/settings' component={Settings}/>\n                                <Route path='/login' component={Login}/>\n                                <Route path='*' render={() => <div>404 Not Found\n                                    <Button type={\"primary\"}>hello</Button>\n                                </div>}/>\n                            </Switch>\n                        </Suspense>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>Samurai Social Network ©2021 Created by Adil</Footer>\n                </Layout>\n            </Layout>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nconst AppContainer = compose<React.ComponentType>(connect(mapStateToProps, {initializeApp}),\n    withRouter)(App);\n\nconst SocialNetworkApp: FC = () => {\n    return <Provider store={store}>\n        <HashRouter>\n            <AppContainer/>\n        </HashRouter>\n    </Provider>\n}\n\nexport default SocialNetworkApp","import React from 'react';\nimport './index.css';\nimport ReactDOM from \"react-dom\";\nimport SocialNetworkApp from \"./App\";\n\nReactDOM.render(<SocialNetworkApp/>, document.getElementById('root'));\n\n\n\n\n\n","import React, {FC} from 'react'\nimport styles from './FormsControls.module.css'\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nconst FormControl: FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n\n}\n\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\n    const {input, meta, children, ...restProps} = props\n    return <FormControl {...props}><textarea {...input}{...restProps}/> </FormControl>\n}\nexport const Input: FC<WrappedFieldProps> = (props) => {\n    const {input, meta, children, ...restProps} = props\n    return <FormControl {...props}><input {...input}{...restProps}/> </FormControl>\n}\n\n\nexport function createField<FormsKeysType extends string> (placeholder: string | undefined,\n                            name: FormsKeysType, validators: Array<FieldValidatorType>,\n                            component: FC<WrappedFieldProps>, props = {}, text = '') {\n        return <div>\n    {text}\n        <Field placeholder={placeholder} name={name}\n        validate={validators} component={component} {...props}/>\n        </div>\n    }\n\nexport type GetStringKeys<T> = Extract<keyof T, string>\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3oI2W\",\"error\":\"FormsControls_error__9lcue\",\"formSummaryError\":\"FormsControls_formSummaryError__1F2-S\"};","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) return undefined\n    return 'Field is required'\n}\n\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\n\n    return undefined\n}\n\n\n\n","import React from 'react'\nimport styles from './Preloader.module.css'\n\nconst Preloader = () => {\n    return (\n        <div className={styles.loader}>Loading...</div>\n    )\n}\n\nexport default Preloader"],"sourceRoot":""}